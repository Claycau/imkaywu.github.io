---
layout: post
title: Find the direction of hand
tags: [Hand Gesture Recognition]
categories: blog
---

After detecting the contour of the hand gestures, we represent it as a [time-series curce], as shown in the following images. 

The [time-series curve] records the relative distance between each contour vertex to the centroid starting from the reference point. The horizontal axis denotes the angle between each contour vertex and the reference point relative to the centroid, normalized by 360. The vertical axis denotes the Euclidean distance between the contour vertices and the centroid, normalized by the radius of the inscribed circle. So what we gonna do is finding this reference points and it has to be relatively fixed, otherwise the degree of the ensuing points may vary among different images. We choose to first detect the direction of the hand, then locate this reference point in the wrist area.

### Plan A

Intuitively, the contour of hand represent the direction of the hand (though this is not accurate, it's suffice for right now), so we can check the neighboring contour vertex and their relative positions, then calculate the direction of hand using this information.

I decide to predefine 16 different directions and here is how I did it:

    function direction_angle=direction_detector1(x_array,y_array)
    direction=zeros(1,17);
    for i=1:size(x_array,2);
        index1=i;
        if(i<size(x_array,2)-2)
            index2=i+3;
        elseif(i<size(x_array,2)-1)
            index2=1;
        elseif(i<size(x_array,2))
            index2=2;
        else
            index2=3;
        end
        if(x_array(index2)~=x_array(index1))
            k=(y_array(index2)-y_array(index1))/(x_array(index2)-x_array(index1));
            switch k
                case 0
                    if(x_array(index2)>x_array(index1))
                        direction(1)=direction(1)+1;
                    else
                        direction(17)=direction(17)+1;
                    end
                case -1/3
                    direction(2)=direction(2)+1;
                case -1/2
                    direction(3)=direction(3)+1;
                case -2/3
                    direction(4)=direction(4)+1;
                case -1
                    direction(5)=direction(5)+1;
                case -3/2
                    direction(6)=direction(6)+1;
                case -2
                    direction(7)=direction(7)+1;
                case -3
                    direction(8)=direction(8)+1;
                    
                case 3
                    direction(10)=direction(10)+1;
                case 2
                    direction(11)=direction(11)+1;
                case 3/2
                    direction(12)=direction(12)+1;
                case 1
                    direction(13)=direction(13)+1;
                case 2/3
                    direction(14)=direction(14)+1;
                case 1/2
                    direction(15)=direction(15)+1;
                case 1/3
                    direction(16)=direction(16)+1;
            end
        else
            direction(9)=direction(9)+1;
        end
    end

    angle=-[atan2(0,1),atan2(-1,3),atan2(-1,2),atan2(-2,3),atan2(-1,1),atan2(-3,2),atan2(-2,1),atan2(-3,1),atan2(-1,-0),atan2(-3,-1),atan2(-2,-1),atan2(-3,-2),atan2(-1,-1),atan2(-2,-3),atan2(-1,-2),atan2(-1,-3)]/pi*180;
    direction_temp=zeros(1,15);
    direction([1,17])=[];
    angle(1)=[];
    [a,index]=max(direction);
    for i=1:15
        direction_temp(i)=i-index;
    end
    direction=direction/sum(direction);
    direction=direction.*direction_temp;
    direction=sum(direction);
    index=find(direction_temp==0);
    direction_fix=fix(direction);
    if(direction<0)
        direction_angle=angle(index+direction_fix)-abs(direction-direction_fix)*(angle(index+direction_fix)-angle(index+direction_fix-1));
    else
        direction_angle=abs(direction-direction_fix)*(angle(index+direction_fix+1)-angle(index+direction_fix))+angle(index+direction_fix);
    end
    end

Then we need to locate the reference point in the wrist.

    function [x_refer,y_refer,index]=refer_point(x_array,y_array,x_center,y_center,direction_angle)
    direction_angle1=atan2((y_array-y_center),(x_array-x_center))/pi*180;
    direction_angle1(direction_angle1>0)=360-direction_angle1(direction_angle1>0);    % -180~+180=>0~360
    direction_angle1(direction_angle1<0)=-direction_angle1(direction_angle1<0);
    direction_angle1=direction_angle1-direction_angle-180;%this may have problems
    while(true)
        [a,index]=min(abs(direction_angle1));
        x_refer=x_array(index);
        y_refer=y_array(index);
        if(y_refer>y_center)
            break;
        end
        direction_angle1(index)=360;
    end
    end

### Plan B

This method mentioned above is not all that accurate, especially when the hands are tilted. So I came up with something more accurate. Because points below the centroid actually contribute less to the direction of hand, and even worse have nothing to do with the direction. Like the points in the wrist, they are almost perpendicular to the hand direction. So I only use those above the centroid to calculate the directione.

First, I need to find out the points that are perpendicular to the direction detected initially.

    function [start_index,end_index]=start_end_points(x_array,y_array,x_center,y_center,direction_angle)
    flag1=1;
    flag2=1;
    direction_angle1=atan2((y_array-y_center),(x_array-x_center))/pi*180;
    direction_angle1(direction_angle1>0)=360-direction_angle1(direction_angle1>0);    % -180~+180=>0~360
    direction_angle1(direction_angle1<0)=-direction_angle1(direction_angle1<0);
    direction_angle2=direction_angle1;
    if(direction_angle<90)
        direction_angle1=direction_angle+270-direction_angle1;%end point,-90+360
    else
        direction_angle1=direction_angle1-direction_angle+90;
    end
    direction_angle2=direction_angle2-direction_angle-90;%start point
    
    while(true)
        [a,end_index]=min(abs(direction_angle1));
        [a,start_index]=min(abs(direction_angle2));
        if(x_array(end_index)>x_center)
            flag1=0;
        else
            direction_angle1(end_index)=360;
        end
        if(x_array(start_index)<x_center)
            flag2=0;
        else
            direction_angle2(start_index)=360;
        end
        if(~(flag1||flag2))
            break;
        end
    end
    end

Then, I transform the hand contour to a [time-series graph] to [find the fingertip and fingervalleys]. These positions of fingers are the key to find out the accurate positions of each finger, and we assume that the directions of the fingers represent the direction of the hand, thus the direction detected using this method is much more accurate and reliable.

Here is the code to find the accurate direction of fingers and hand

%% ----detect the direction again---- %%
    direction=zeros(1,size(fingertip,2));
    for i=1:2*size(fingertip,2)
        index=ceil(i/2);
        index1=mod(i,2);
        if(index1)
            finger_index=(start_index+fingertip(index)-1)-20;
            direction_temp=atan2(y_array(finger_index)-y_array(start_index+fingervalley(index)-1),x_array(finger_index)-x_array(start_index+fingervalley(index)-1))/pi*180;
        else
            finger_index=(start_index+fingertip(index)-1)+20;
            direction_temp=atan2(y_array(finger_index)-y_array(start_index+fingervalley(index+1)-1),x_array(finger_index)-x_array(start_index+fingervalley(index+1)-1))/pi*180;
        end
        direction_temp=(direction_temp<=0)*abs(direction_temp)+(direction_temp>0)*(360-direction_temp);
        direction_temp=(direction_temp>270)*(direction_temp-360)+(direction_temp<270)*direction_temp;
        direction(index)=direction(index)+direction_temp;
    end
    direction_angle1=mean(direction/2);

